{"version":3,"sources":["../../src/config/passportSetup.js"],"names":["passport","require","GoogleOAuthStrategy","User","use","clientID","process","env","OAUTH_CLIENT_ID","clientSecret","OAUTH_CLIENT_SECRET","callbackURL","accessToken","refreshToken","profile","done","googleId","id","findOne","err","currUser","console","log","user","username","displayName","save","then","newUser","serializeUser","deserializeUser","findById"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,sBAAsBD,QAAQ,yBAAR,CAA5B;AACA,IAAME,OAAOF,QAAQ,cAAR,CAAb;;AAEAD,SAASI,GAAT,CACE,IAAIF,mBAAJ,CAAwB;AACtBG,YAAUC,QAAQC,GAAR,CAAYC,eADA;AAEtBC,gBAAcH,QAAQC,GAAR,CAAYG,mBAFJ;AAGtBC,eAAa;AAHS,CAAxB,EAIG,UAACC,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCC,IAArC,EAA8C;;AAE/C;AACA;AACA;;AAEA,MAAMC,WAAWF,QAAQG,EAAzB;;AAEAd,OAAKe,OAAL,CAAa,EAACF,UAAUA,QAAX,EAAb,EAAmC,UAASG,GAAT,EAAcC,QAAd,EAAwB;AACzD,QAAID,GAAJ,EAAS;AACP,YAAMA,GAAN;AACD,KAFD,MAEO;AACL,UAAIC,QAAJ,EAAc;AACZC,gBAAQC,GAAR,CAAY,qBAAZ;AACAP,aAAK,IAAL,EAAWK,QAAX;AACD,OAHD,MAGO;AACL,YAAMG,OAAO,IAAIpB,IAAJ,CAAS;AACpBqB,oBAAUV,QAAQW,WADE;AAEpBT,oBAAUF,QAAQG;AAFE,SAAT,CAAb;;AAKAM,aAAKG,IAAL,GAAYC,IAAZ,CAAiB,UAACC,OAAD,EAAa;AAC5BP,kBAAQC,GAAR,CAAY,gBAAZ;AACAP,eAAK,IAAL,EAAWa,OAAX;AACD,SAHD;AAID;AACF;AAEF,GApBD;AAsBD,CAlCD,CADF;;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5B,SAAS6B,aAAT,CAAuB,UAACN,IAAD,EAAOR,IAAP,EAAgB;AACrCA,OAAK,IAAL,EAAWQ,KAAKN,EAAhB;AACD,CAFD;;AAIAjB,SAAS8B,eAAT,CAAyB,UAACb,EAAD,EAAKF,IAAL,EAAc;AACrCZ,OAAK4B,QAAL,CAAcd,EAAd,EAAkBU,IAAlB,CAAuB,UAACJ,IAAD,EAAU;AAC/BR,SAAK,IAAL,EAAWQ,IAAX;AACD,GAFD;AAGD,CAJD","file":"passportSetup.js","sourcesContent":["const passport = require('passport');\r\nconst GoogleOAuthStrategy = require('passport-google-oauth20');\r\nconst User = require('./user_model');\r\n\r\npassport.use(\r\n  new GoogleOAuthStrategy({\r\n    clientID: process.env.OAUTH_CLIENT_ID,\r\n    clientSecret: process.env.OAUTH_CLIENT_SECRET,\r\n    callbackURL: '/auth/redirect'\r\n  }, (accessToken, refreshToken, profile, done) => {\r\n\r\n    // This callback function is fired when the\r\n    // passport.authenticate function is called\r\n    // again in the callback route (/auth/redirect).\r\n\r\n    const googleId = profile.id;\r\n\r\n    User.findOne({googleId: googleId}, function(err, currUser) {\r\n      if (err) {\r\n        throw err;\r\n      } else {\r\n        if (currUser) {\r\n          console.log('user already exists');\r\n          done(null, currUser);\r\n        } else {\r\n          const user = new User({\r\n            username: profile.displayName,\r\n            googleId: profile.id\r\n          });\r\n\r\n          user.save().then((newUser) => {\r\n            console.log('new user saved');\r\n            done(null, newUser);\r\n          });\r\n        }\r\n      }\r\n\r\n    });\r\n\r\n  })\r\n);\r\n\r\n// serializeUser sets the id as cookie in the user's browser which\r\n// can be retrieved later using deserializeUser function later.\r\n//\r\n// In other words: serializeUser decides what is stored in cookie\r\n// and deserializeUser loads user data based on cookie content\r\n//\r\n// More info at:\r\n// https://stackoverflow.com/questions/27637609/understanding-passport-serialize-deserialize\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser((id, done) => {\r\n  User.findById(id).then((user) => {\r\n    done(null, user);\r\n  });\r\n});\r\n"]}