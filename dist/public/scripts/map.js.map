{"version":3,"sources":["../../../src/public/scripts/map.js"],"names":["host","window","location","socket","io","connect","clicks","changeView","document","getElementById","addEventListener","innerHTML","$","hide","show","fire","HandleEmptyRequest","target","time","setTimeout","swal","title","text","type","click","href","on","data","renderGlobal","dataTable","col","push","i","length","parsed","row","score","DrawMap","mapView","console","log","el","google","charts","load","setOnLoadCallback","visualization","arrayToDataTable","opts","Object","backgroundColor","region","displayMode","resolution","legend","position","chart","GeoChart","draw","local"],"mappings":"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","file":"map.js","sourcesContent":["const host = window.location.host;\nconst socket = io.connect(host);\nlet clicks = 0;\nlet changeView = document.getElementById('switch');\n\nchangeView.addEventListener(\"click\", function() {\n  clicks++;\n  if (clicks % 2 != 0) {\n    changeView.innerHTML = 'Change to Local';\n    $('#map').hide();\n    $('#map2').show();  \n  } else {\n    changeView.innerHTML = 'Change to Global';\n    $('#map').show();\n    $('#map2').hide();   \n  }\n  \n});\nlet fire = 0; // Checks if 'final' event has been fired\nfunction HandleEmptyRequest(target, time) {\n  // Checks if the 'final' event fires after \n  // a 30 seconds. If the event doesn't fire\n  // means that an empty request has been \n  // recieved by the server and so the user is\n  // redirected back to home\n\n  setTimeout(function() {\n    if(!fire) {\n      swal({\n        title: 'Connection Timeout!',\n        text: 'Please try searching for the query again!',\n        type: 'error',\n\n      })\n      $('.swal2-confirm').click(function(){\n        window.location.href = '/';\n      });\n      \n    }\n  }, time * 1000);\n}\n\n// Check for empty request after 30s \nHandleEmptyRequest('final', 30);\n\nsocket.on('final', function(data) {\n  fire = 1;\n  renderGlobal(data);\n  document.getElementById('status').innerHTML = 'Back to home';\n  let dataTable = []; // 2D Array\n  let col = ['State', 'Score'];\n\n  dataTable.push(col);\n\n  for (let i = 0; i < data.length; i++) { \n    // Check if location is valid or not\n    if (data[i].parsed) {\n      let row = [data[i].location ,data[i].score];\n      dataTable.push(row);\n    }\n  }\n\n  DrawMap(dataTable, 'local');\n});\n\nfunction DrawMap(dataTable, mapView) {\n  console.log(mapView);\n  let el;\n  \n  if(mapView == 'local') {\n    el = document.getElementById('map');\n  } else {\n    el = document.getElementById('map2');\n  }\n\n  google.charts.load('current', {\n    'packages': ['geochart'],\n    'mapsApiKey': 'AIzaSyD-9tSrke72PouQMnMX-a7eZSW0jkFMBWY'\n  });\n\n  google.charts.setOnLoadCallback(function() {\n    const data = google.visualization.arrayToDataTable(dataTable);\n    let opts = new Object;\n\n    if (mapView == 'local') {\n      opts = {\n        backgroundColor: '#ecf0f1',\n        region: 'US',\n        displayMode: 'regions',\n        resolution: 'provinces',\n        legend: {position: 'none'}\n  \n      }\n    } else {\n      opts = {\n        backgroundColor: '#ecf0f1',\n        legend: {position: 'none'}\n      }\n    }\n\n    const chart = new google.visualization.GeoChart(el);\n    chart.draw(data, opts);\n  });\n}\n\nfunction renderGlobal(data) {\n  let dataTable = []; // 2D Array\n  let col = ['State', 'Score'];\n\n  dataTable.push(col);\n\n  for (let i = 0; i < data.length; i++) { \n    // Check if location is valid or not\n    if (data[i].parsed) {\n      if(data[i].local) {\n        let row = ['United States' ,data[i].score];\n        dataTable.push(row);\n      } else {\n        let row = [data[i].location ,data[i].score];\n        dataTable.push(row);\n      }\n     \n    }\n\n    DrawMap(dataTable, 'global');\n  }\n}\n"]}