{"version":3,"sources":["../../src/utils/fetchTweets.js"],"names":["module","exports","FetchTweets","app","options","io","get","credentials","consumer_key","process","env","TWITTER_CONSUMER_KEY","consumer_secret","TWITTER_CONSUMER_SECRET","access_token","TWITTER_ACCESS_TOKEN","access_token_secret","TWITTER_ACCESS_SECRET","reqOpts","Object","then","response","bearerToken","body","oauth","headers","request","url","query","err","res","tweetData","JSON","parse","tweets","statuses","data","i","length","user","location","push","text","full_text","emit","catch","console","error"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAmC;AAClD,MAAMC,KAAKF,IAAIG,GAAJ,CAAQ,WAAR,CAAX;AACA,MAAMC,cAAc;AAClBC,kBAAcC,QAAQC,GAAR,CAAYC,oBADR;AAElBC,qBAAiBH,QAAQC,GAAR,CAAYG,uBAFX;AAGlBC,kBAAcL,QAAQC,GAAR,CAAYK,oBAHR;AAIlBC,yBAAqBP,QAAQC,GAAR,CAAYO;;AAJf,GAApB;AAOA,MAAIC,UAAU,IAAIC,MAAJ,EAAd,CATkD,CASxB;;AAE1B,gCAAeZ,WAAf,EACCa,IADD,CACM,UAACC,QAAD,EAAc;AAClB,QAAMC,cAAcD,SAASE,IAAT,CAAcT,YAAlC;;AAEA;AACAI,YAAQM,KAAR,GAAgBjB,WAAhB;;AAEA;AACA,QAAIkB,UAAU;AACZ,uBAAiB,YAAYH,WADjB;AAEZ,sBAAgB;AAFJ,KAAd;AAIAJ,YAAQO,OAAR,GAAkBA,OAAlB;;AAEAC,sBAAQpB,GAAR,CAAY;AACVqB,WAAK,yDAAyDvB,QAAQwB,KAAjE,GAAyE,gCADpE;AAEVH,eAASP,QAAQO;AAFP,KAAZ,EAGG,UAASI,GAAT,EAAcC,GAAd,EAAmBP,IAAnB,EAAyB;AAC1B,UAAIM,GAAJ,EAAS;AACP,cAAMA,GAAN;AACD,OAFD,MAEO;AACL,YAAIE,YAAYC,KAAKC,KAAL,CAAWV,IAAX,CAAhB;AACA,YAAIW,SAASH,UAAUI,QAAvB;AACA,YAAIC,OAAO,EAAX;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,OAAOI,MAA3B,EAAmCD,GAAnC,EAAwC;AACtC,cAAIH,OAAOG,CAAP,EAAUE,IAAV,CAAeC,QAAnB,EAA6B;AAC3BJ,iBAAKK,IAAL,CAAU;AACRC,oBAAMR,OAAOG,CAAP,EAAUM,SADR;AAERH,wBAAUN,OAAOG,CAAP,EAAUE,IAAV,CAAeC;AAFjB,aAAV;AAID;AACF;;AAED;AACAnC,WAAGuC,IAAH,CAAQ,OAAR,EAAiB,wBAASR,IAAT,CAAjB;AACD;AAEF,KAxBD;AAyBD,GAvCD,EAwCCS,KAxCD,CAwCO,UAAChB,GAAD,EAAS;AACdiB,YAAQC,KAAR,CAAclB,GAAd;AACD,GA1CD;AA2CD,CAtDD","file":"fetchTweets.js","sourcesContent":["import request from 'request';\r\nimport getBearerToken from './getBearerToken';\r\nimport getScore from './getScore';\r\n\r\nmodule.exports = function FetchTweets(app, options) {\r\n  const io = app.get('socket.io');\r\n  const credentials = {\r\n    consumer_key: process.env.TWITTER_CONSUMER_KEY,\r\n    consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\r\n    access_token: process.env.TWITTER_ACCESS_TOKEN,\r\n    access_token_secret: process.env.TWITTER_ACCESS_SECRET\r\n\r\n  };\r\n  let reqOpts = new Object; // Holds options for GET request for tweet search\r\n\r\n  getBearerToken(credentials)\r\n  .then((response) => {\r\n    const bearerToken = response.body.access_token;\r\n\r\n    // Create oauth option for GET request\r\n    reqOpts.oauth = credentials;\r\n\r\n    // Create headers for GET request\r\n    let headers = {\r\n      'Authorization': 'Bearer ' + bearerToken,\r\n      'Content-type': 'application/json'\r\n    };\r\n    reqOpts.headers = headers;\r\n\r\n    request.get({\r\n      url: 'https://api.twitter.com/1.1/search/tweets.json?q=%23' + options.query + '&count=100&tweet_mode=extended',\r\n      headers: reqOpts.headers\r\n    }, function(err, res, body) {\r\n      if (err) {\r\n        throw err;\r\n      } else {\r\n        let tweetData = JSON.parse(body);\r\n        let tweets = tweetData.statuses;\r\n        let data = [];\r\n\r\n        for (let i = 0; i < tweets.length; i++) {\r\n          if (tweets[i].user.location) {\r\n            data.push({\r\n              text: tweets[i].full_text,\r\n              location: tweets[i].user.location\r\n            });\r\n          }\r\n        }\r\n\r\n        // Generate scores for tweets\r\n        io.emit('final', getScore(data));\r\n      }\r\n\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(err);\r\n  });\r\n};\r\n"]}