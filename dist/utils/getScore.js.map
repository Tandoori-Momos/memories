{"version":3,"sources":["../../src/utils/getScore.js"],"names":["Locations","sentiment","Sentiment","module","exports","tweets","getSignmoid","x","Math","exp","checkExist","location","array","found","i","length","calculateScores","scores","index","j","score","analyze","text","push","toUpperCase","StateCodes","includes","States","parsed","local","k","Countries","console","log"],"mappings":"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","file":"getScore.js","sourcesContent":["import Sentiment from 'sentiment';\r\nimport * as Locations from '../public/data/locations';\r\n\r\nconst sentiment = new Sentiment();\r\n\r\nmodule.exports = function(tweets) {\r\n  function getSignmoid(x) {\r\n    return 1/(1+Math.exp(-x));\r\n  }\r\n  function checkExist(location, array) {\r\n    let found = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (location == array[i].location) {\r\n        found++;\r\n      }\r\n    }\r\n\r\n    if (found) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function calculateScores(tweets) {\r\n    let scores = [];\r\n    for (let i = 0; i < tweets.length; i++) {\r\n      if (checkExist(tweets[i].location, scores)) {\r\n        let index = 0;\r\n        for (let j = 0; j < scores.length; j++) {\r\n          if (scores[j].location == tweets[i].location) {\r\n            index = j;\r\n          }\r\n        }\r\n        scores[index].score += sentiment.analyze(scores[index].text).score;\r\n      } else {\r\n        scores.push({\r\n          location: tweets[i].location,\r\n          score: sentiment.analyze(tweets[i].text).score\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < scores.length; i++) {\r\n      let location = scores[i].location.toUpperCase();\r\n\r\n      // 1st level of extraction: USA States\r\n      // if state code or state name exists in the\r\n      // location text then replace the location by the state\r\n      for (let j = 0; j < Locations.StateCodes.length; j++) {\r\n        if (location.includes(Locations.StateCodes[j].toUpperCase()) || location.includes(Locations.States[j].toUpperCase())) {\r\n          scores[i].location = Locations.States[j];\r\n          scores[i].parsed = true;\r\n          scores[i].local = true;\r\n          scores[i].score = getSignmoid(scores[i].score);\r\n        }\r\n      }\r\n\r\n      // 2nd level of extraction: World\r\n      // if country name exists in the location text\r\n      // then replace the location by the country\r\n      for (let k = 0; k < Locations.Countries.length; k++) {\r\n        if (location.includes(Locations.Countries[k].toUpperCase())) {\r\n          scores[i].location = Locations.Countries[k];\r\n          scores[i].parsed = true;\r\n          scores[i].local = false;\r\n          scores[i].score = getSignmoid(scores[i].score);\r\n        }\r\n      }\r\n    }\r\n\r\n    return scores;\r\n  }\r\n  console.log(calculateScores(tweets));\r\n  return calculateScores(tweets);\r\n};\r\n"]}