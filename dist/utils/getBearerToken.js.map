{"version":3,"sources":["../../src/utils/getBearerToken.js"],"names":["request","require","module","exports","getBearerToken","credentials","callback","Promise","resolve","reject","encodeStr","str","encodeURIComponent","replace","consumerKey","consumer_key","consumerSecret","consumer_secret","rawKey","key","Buffer","from","toString","post","url","headers","body","json","err","res","console","log"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;;AAEAC,OAAOC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,WAAxB,EAAqCC,QAArC,EAA+C;AAC9D,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C;AACA,aAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,aAAOC,mBAAmBD,GAAnB,EACJE,OADI,CACI,IADJ,EACU,KADV,EAEJA,OAFI,CAEI,KAFJ,EAEW,KAFX,EAGJA,OAHI,CAGI,KAHJ,EAGW,KAHX,EAIJA,OAJI,CAII,KAJJ,EAIW,KAJX,CAAP;AAKD;;AAED,QAAI;AACF,UAAMC,cAAcJ,UAAUL,YAAYU,YAAtB,CAApB;AACA,UAAMC,iBAAiBN,UAAUL,YAAYY,eAAtB,CAAvB;;AAEA,UAAMC,SAASJ,cAAc,GAAd,GAAoBE,cAAnC;;AAEA;AACA,UAAMG,MAAMC,OAAOC,IAAP,CAAYH,MAAZ,EAAoBI,QAApB,CAA6B,QAA7B,CAAZ;;AAEA;AACA;AACAtB,cAAQuB,IAAR,CAAa;AACXC,aAAK,sCADM;AAEXC,iBAAS;AACP,2BAAiB,WAAWN,GADrB;AAEP,0BAAgB;AAFT,SAFE;AAMXO,cAAM,+BANK;AAOXC,cAAM;AAPK,OAAb,EAQG,UAASC,GAAT,EAAcC,GAAd,EAAmBH,IAAnB,EAAyB;AAC1B,YAAI,CAACA,IAAL,EAAW;AACTjB,iBAAO,0DAAP;AACD,SAFD,MAEO;AACLD,kBAAQqB,GAAR;AACD;AACF,OAdD;AAgBD,KA3BD,CA2BE,OAAOD,GAAP,EAAY;AACZE,cAAQC,GAAR,CAAYH,GAAZ;AACD;AACF,GAxCM,CAAP;AAyCD,CA1CD","file":"getBearerToken.js","sourcesContent":["const request = require('request');\r\n\r\nmodule.exports = function getBearerToken(credentials, callback) {\r\n  return new Promise(function(resolve, reject) {\r\n    // Encode a string as per RFC 1738\r\n    function encodeStr(str) {\r\n      return encodeURIComponent(str)\r\n        .replace(/'/g, '%27')\r\n        .replace(/\\(/g, '%28')\r\n        .replace(/\\)/g, '%29')\r\n        .replace(/\\*/g, '%2A');\r\n    }\r\n\r\n    try {\r\n      const consumerKey = encodeStr(credentials.consumer_key);\r\n      const consumerSecret = encodeStr(credentials.consumer_secret);\r\n\r\n      const rawKey = consumerKey + ':' + consumerSecret;\r\n\r\n      // Convert raw key to base64\r\n      const key = Buffer.from(rawKey).toString('base64');\r\n\r\n      // Send POST request to twitter API for\r\n      // bearer token for App-only Authentication\r\n      request.post({\r\n        url: 'https://api.twitter.com/oauth2/token',\r\n        headers: {\r\n          'Authorization': 'Basic ' + key,\r\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n        },\r\n        body: 'grant_type=client_credentials',\r\n        json: true\r\n      }, function(err, res, body) {\r\n        if (!body) {\r\n          reject('Not valid reply from Twitter upon obtaining bearer token');\r\n        } else {\r\n          resolve(res);\r\n        }\r\n      });\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    };\r\n  });\r\n};\r\n"]}